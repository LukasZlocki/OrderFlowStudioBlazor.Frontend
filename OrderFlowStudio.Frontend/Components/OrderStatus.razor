@page "/orderstatus/{id:int}"
@using OrderFlowStudio.Frontend.Data
@inject HttpClient http

<!--

<table class="table table-bordered">
        <tr>
            <th>Process</th>
            <th>Status</th>
            <th>Time</th>
        </tr>
    <tbody>
        <tr>
            <td>Started</td>
            @if (raport.isStarted == false)
            {
                <td><span class="badge badge-dark">Not started</span></td>
            }
            @if (raport.isStarted == true)
            {
                <td><span class="badge badge-success">Finished</span></td>
            }
        </tr>
        <tr>
            <td>Masked</td>
            @if (raport.isMasked == false)
            {
                <td><span class="badge badge-dark">Not started</span></td>
            }
            @if (raport.isMasked == true)
            {
                <td><span class="badge badge-success">Finished</span></td>
            }
        </tr>
        <tr>
            <td>Processed</td>
            @if (raport.isProcessed == false)
            {
                <td><span class="badge badge-dark">Not started</span></td>
            }
            @if (raport.isProcessed == true)
            {
                <td><span class="badge badge-success">Finished</span></td>
            }
        </tr>
        <tr>
            <td>Process OK</td>
            @if (raport.isProcessOK == false && raport.isProcessed == false)
            {
                <td><span class="badge badge-dark">Not started</span></td>
            }
            @if (raport.isProcessOK == true)
            {
                <td><span class="badge badge-success">Finished</span></td>
            }
            @if (raport.isProcessOK == false && raport.isProcessed == true)
            {
                <td><span class="badge badge-danger">Not OK</span></td>
            }
        </tr>
        <tr>
            <td>Correction started</td>
            @if (raport.isCorrectionStarted == false && raport.isCorrectionFinished == false)
            {
                <td><span class="badge badge-dark">Not started</span></td>
            }
            @if (raport.isCorrectionStarted == true && raport.isCorrectionFinished == false)
            {
                <td><span class="badge badge-primary">Correction in progress</span></td>
            }
            @if (raport.isCorrectionStarted == true && raport.isCorrectionFinished == true)
            {
                <td><span class="badge badge-success">Finished</span></td>
            }
        </tr>
        <tr>
            <td>Correction finished</td>
            @if (raport.isCorrectionFinished == false)
            {
                <td><span class="badge badge-dark">Not started</span></td>
            }
            @if (raport.isCorrectionFinished == true)
            {
                <td><span class="badge badge-success">Finished</span></td>
            }
        </tr>
        <tr>
            <td>Order finished</td>
            @if (raport.isOrderFinished == false)
            {
                <td><span class="badge badge-dark">Not started</span></td>
            }
            @if (raport.isOrderFinished == true)
            {
                <td><span class="badge badge-success">Finished</span></td>
            }
        </tr>
    </tbody>

</table>


-->

@code {
    [Parameter]
    public int Id {get; set;}

    Report raport = new Report();

    

    protected override async Task OnInitializedAsync()
    {
       raport = await http.GetJsonAsync<Report>("http://localhost:6001/api/raport/" + Id);
    }
    
}