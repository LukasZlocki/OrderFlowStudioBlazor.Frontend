@page "/gatepacking"
@using OrderFlowStudio.Frontend.Data;
@inject HttpClient http;

<!--
    ToDo:
-->

<h1>Select order to work on:</h1>

<div class="border-bottom border-white shadow rounded-lg" style="backgoround-color: #ededed">
    <table class="table table-striped boarder table-hover">
        <tr>
            <th>Order nb</th>
            <th>Quantity</th>
            <th>Part nb</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
        <tbody>
            @foreach (var order in @OrdersForProcessingList)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.Quantity</td>
                    <td>@order.ProductDto.PartNumber</td>
                    <td>@order.ProductDto.ProductDescription</td>
                    <td><button class="btn btn-secondary" @onclick="@(() => UpdateOrderWithPackingInProgressStatus(order.Id))">Start Packing</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="border-bottom border-white shadow rounded-lg" style="backgoround-color: #ededed">
    <table class="table table-striped boarder table-hover">
        <tr>
            <th>Order nb</th>
            <th>Quantity</th>
            <th>Part nb</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
        <tbody>
            @foreach (var order in @OrdersForCorrectionList)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.Quantity</td>
                    <td>@order.ProductDto.PartNumber</td>
                    <td>@order.ProductDto.ProductDescription</td>
                    <td><button class="btn btn-secondary" @onclick="@(() => UpdateOrderWithPackingInProgressStatus(order.Id))">Start Packing</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<br>
<br>
<h1>Packing in progress:</h1>

<div class="border-bottom border-white shadow rounded-lg" style="backgoround-color: #ededed">
    <table class="table table-striped boarder table-hover">
        <tr>
            <th>Order nb</th>
            <th>Quantity</th>
            <th>Part nb</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
        <tbody>
            @foreach (var order in @OrdersPackingInProgressList)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.Quantity</td>
                    <td>@order.ProductDto.PartNumber</td>
                    <td>@order.ProductDto.ProductDescription</td>
                    <td><button class="btn btn-success">Masking in progress</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    List<OrderReadDto> OrdersForProcessingList = new List<OrderReadDto>();
    List<OrderReadDto> OrdersForCorrectionList = new List<OrderReadDto>();
    List<OrderReadDto> OrdersPackingInProgressList = new List<OrderReadDto>();

    protected override async Task OnInitializedAsync()
    {
        // ToDo: load orders registered at area but without status masking in progress
        OrdersForProcessingList = await http.GetJsonAsync<List<OrderReadDto>>("http://localhost:6001/api/order/processinginprogress");
        OrdersForCorrectionList = await http.GetJsonAsync<List<OrderReadDto>>("http://localhost:6001/api/order/correctioninprogress");
        OrdersPackingInProgressList = await http.GetJsonAsync<List<OrderReadDto>>("http://localhost:6001/api/order/packingprogress");
    }

    private async Task UpdateOrderWithPackingInProgressStatus(int orderID)
    {
        /*
        // ToDo : Code changing status to packing in progress
        var orderReadDto = OrdersForProcessingList.Where(id => id.Id == orderID).FirstOrDefault();
        // Update order in database
        var serviceResponse = await http.PutJsonAsync<OrderReadDto>("http://localhost:6001/api/order/maskinginprogress", orderReadDto);
        */
    }
}